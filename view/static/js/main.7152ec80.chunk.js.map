{"version":3,"sources":["Pages/Landing.js","Pages/SignIn.js","Pages/SignUp.js","Pages/WorkSpace.js","controllers/NavigationBar/index.js","App.js","serviceWorker.js","index.js"],"names":["Landing","SignIn","SignUp","WorkSpace","NavigationBar","useState","activeItem","state","setState","setItem","e","name","Segment","Menu","className","secondary","Item","as","Link","to","active","onClick","src","alt","App","useEffect","socket","io","connect","on","data","console","log","emit","my","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","history","createBrowserHistory","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yPAUeA,MARf,WACE,OACE,6BACE,8CCKSC,MARf,WACE,OACE,6BACE,8CCKSC,MARf,WACE,OACE,6BACE,6CCKSC,MARf,WACE,OACE,6BACE,gD,mDC6CSC,MA7Cf,WAA0B,IAAD,EACGC,mBAAS,CACjCC,WAAY,SAFS,mBAChBC,EADgB,KACTC,EADS,KAKvB,SAASC,EAAQC,EAAjB,GAA8B,IAARC,EAAO,EAAPA,KACpBH,EAAS,eACJD,EADG,CAEND,WAAaK,KARM,IAYfL,EAAeC,EAAfD,WAER,OACE,kBAACM,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAMC,UAAU,gBAAgBC,WAAS,GACvC,0BAAMD,UAAU,QAAhB,eACA,kBAACD,EAAA,EAAKG,KAAN,CACEC,GAAIC,IAAMC,GAAG,QACbR,KAAK,OACLS,OAAuB,SAAfd,EACRe,QAASZ,IAEX,kBAACI,EAAA,EAAKG,KAAN,CACEC,GAAIC,IAAMC,GAAG,QACbR,KAAK,WACLS,OAAuB,aAAfd,EACRe,QAASZ,IAEX,kBAACI,EAAA,EAAKG,KAAN,CACEC,GAAIC,IAAMC,GAAG,SACbR,KAAK,UACLS,OAAuB,YAAfd,EACRe,QAASZ,IAEX,yBAAKa,IAAI,wDACPC,IAAI,cACJT,UAAU,6BCXLU,MAvBf,WAQE,OAPAC,qBAAU,WACR,IAAMC,EAASC,IAAGC,QAAQ,yBAC1BF,EAAOG,GAAG,QAAQ,SAACC,GACjBC,QAAQC,IAAIF,GACZJ,EAAOO,KAAK,iBAAkB,CAAEC,GAAI,eAItC,yBAAKpB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOqB,OAAK,EAACC,KAAK,IAAIC,UAAWrC,IACjC,kBAAC,IAAD,CAAOmC,OAAK,EAACC,KAAK,UAAUC,UAAWpC,IACvC,kBAAC,IAAD,CAAOkC,OAAK,EAACC,KAAK,UAAUC,UAAWnC,IACvC,kBAAC,IAAD,CAAOiC,OAAK,EAACC,KAAK,qBAAqBC,UAAWlC,OCZtCmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCPNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KAEI,kBAAC,IAAD,CAAQC,QAASC,eACf,kBAAC,EAAD,QAINC,SAASC,eAAe,SDgHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.7152ec80.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Landing() {\r\n  return (\r\n    <div>\r\n      <h1>Landing ....</h1>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Landing\r\n","import React from 'react'\r\n\r\nfunction SignIn() {\r\n  return (\r\n    <div>\r\n      <h1>Sign In ....</h1>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SignIn\r\n","import React from 'react'\r\n\r\nfunction SignUp() {\r\n  return (\r\n    <div>\r\n      <h1>SignUp ....</h1>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SignUp\r\n","import React from 'react'\r\n\r\nfunction WorkSpace() {\r\n  return (\r\n    <div>\r\n      <h1>WorkSpace ....</h1>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default WorkSpace\r\n","import React, { useState } from 'react';\r\nimport { Menu, Segment, Image } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom'\r\nimport './index.scss';\r\n\r\nfunction NavigationBar() {\r\n  const [state, setState] = useState({\r\n    activeItem: 'home'\r\n  })\r\n\r\n  function setItem(e, { name }){\r\n    setState({\r\n      ...state,\r\n      activeItem : name\r\n    })\r\n  }\r\n\r\n  const { activeItem } = state\r\n \r\n  return (\r\n    <Segment>\r\n      <Menu className=\"NavigationBar\" secondary>\r\n        <span className=\"logo\">CollabChute</span>\r\n        <Menu.Item\r\n          as={Link} to=\"/home\"\r\n          name='home'\r\n          active={activeItem === 'home'}\r\n          onClick={setItem}\r\n        />\r\n        <Menu.Item\r\n          as={Link} to=\"/home\"\r\n          name='messages'\r\n          active={activeItem === 'messages'}\r\n          onClick={setItem}\r\n        />\r\n        <Menu.Item\r\n          as={Link} to=\"/about\"\r\n          name='friends'\r\n          active={activeItem === 'friends'}\r\n          onClick={setItem}\r\n        />\r\n        <img src='https://api.adorable.io/avatars/40/abott@adorable.png' \r\n          alt=\"user-avatar\"\r\n          className=\"NavigationBar__avatar\"/>\r\n      </Menu>\r\n    </Segment>\r\n  )\r\n}\r\n\r\n\r\nexport default NavigationBar\r\n","import React , { useState ,useEffect } from 'react';\r\nimport io from 'socket.io-client';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport Landing from './Pages/Landing';\r\nimport SignIn from './Pages/SignIn';\r\nimport SignUp from './Pages/SignUp';\r\nimport WorkSpace from './Pages/WorkSpace';\r\nimport NavigationBar from './controllers/NavigationBar';\r\n\r\nfunction App() {\r\n  useEffect(() => {\r\n    const socket = io.connect('http://localhost:5000');\r\n    socket.on('news', (data) => {\r\n      console.log(data);\r\n      socket.emit('my other event', { my: 'data' });\r\n    });\r\n  })\r\n  return (\r\n    <div className=\"App\">\r\n      <NavigationBar />\r\n      <Switch>\r\n        <Route exact path=\"/\" component={Landing}/>\r\n        <Route exact path=\"/signin\" component={SignIn}/>\r\n        <Route exact path=\"/signup\" component={SignUp}/>\r\n        <Route exact path=\"/workspace/:projid\" component={WorkSpace}/>\r\n      </Switch>\r\n      {/* <SignInForm /> */}\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport { createBrowserHistory } from 'history';\r\nimport \"semantic-ui-css/semantic.min.css\"\r\n// import { Provider } from 'react-redux';\r\n// import store from './redux/store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    {/* <Provider store={store}> */}\r\n      <Router history={createBrowserHistory()}>\r\n        <App />\r\n      </Router>\r\n    {/* </Provider> */}\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}